#!/bin/bash
#
# git-tools - deploy git without sudo/root
#

set -e

INSTALL_DIR=${INSTALL_DIR:-"$HOME/git-tools"}
WORK_SPACE=${WORK_SPACE:-"/tmp/git-tools"}
LOGFILE="$WORK_SPACE/install.log"

function warn {
  # color:yellow
  echo -e "\033[33mWarning\033[m" "$*"
}

function error {
  # color:red
  echo -e "\033[31mError\033[m" "$*"
}

function success {
  # color:green
  echo -e "\033[32mSuccess\033[m" "$*"
}

# show_result <status> <package>
function show_result {
  case "$1" in
  0 ) success "installed $2 to $INSTALL_DIR" ;;
  * ) error   "failed install $2, see $LOGFILE to more info" ;;
  esac
}

function check_os {
  case "$OSTYPE" in
  linux* )
    success "The system is $OSTYPE, ready to deploy"
    ;;
  * )
    error "$OSTYPE is NOT supported, exitting"
    exit 1
    ;;
  esac
}

# <package> := autoconf | zlib | openssl | curl | expat | git
package_autoconf="ftp://alpha.gnu.org/pub/gnu/autoconf/autoconf-2.68b.tar.gz"
package_zlib="http://zlib.net/zlib-1.2.11.tar.gz"
package_curl="https://curl.haxx.se/download/curl-7.54.0.tar.gz"
package_openssl="https://www.openssl.org/source/openssl-1.1.0e.tar.gz"
package_expat="https://sourceforge.net/projects/expat/files/expat/2.1.0/expat-2.1.0.tar.gz/download"
package_git="https://www.kernel.org/pub/software/scm/git/git-2.13.0.tar.gz"

# download <package>
function download {
  local package=$1
  local package_url=$(eval echo '$package_'$1)
  wget -O "$package.tar.gz" "$package_url"
  success "download source file: $WORK_SPACE/$package.tar.gz"
}

function download_package {
  cd "$WORK_SPACE"
  download "autoconf"
  download "curl"
  download "git"
  download "openssl"
  download "zlib"
  download "expat"
}

# install <package>
function install {
  local result=1
  local package="$1"
  local tar_package="$package.tar.gz"
  cd "$WORK_SPACE"
  echo "installing $package..."
  {
    echo &&
    echo "=========INSTALLING $package=========" &&
    mkdir -p "$package" &&
    tar zxf "$tar_package" -C "$package" --strip-components 1 &&
    cd "$package" &&
    ${PRE_CONFIGURE:-:} &&
    ${CONFIGURE:-./configure} &&
    ${MAKE:-make} &&
    make install
    result=$?
  } > "$WORK_SPACE/tmp.$$" 2>&1
  cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE"
  show_result "$result" "$package"
}

# dependencies tree
#
#   git
#   ├── autoconf
#   ├── curl
#   │   └── openssl
#   │       └── zlib
#   └── expat
#
function install_package {
  echo "git-tools unpack $(date)" > "$LOGFILE"

  export PATH="$PATH:$HOME/git-tools/bin"
  export CFLAGS="-I$INSTALL_DIR/include"
  export LDFLAGS="-L$INSTALL_DIR/lib"
  export LD_LIBRARY_PATH="$INSTALL_DIR/lib"
  export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig"

  # Install
  CONFIGURE="./configure --prefix=$INSTALL_DIR" \
  MAKE="make -j 2" \
    install "autoconf"
  CONFIGURE="./configure --prefix=$INSTALL_DIR" \
  MAKE="make -j 2" \
    install "zlib"
  CONFIGURE="./config --prefix=$INSTALL_DIR shared zlib-dynamic -I$INSTALL_DIR/include" \
  MAKE="make -j 4" \
    install "openssl"
  CONFIGURE="./configure --prefix=$INSTALL_DIR --with-ssl=$INSTALL_DIR" \
  MAKE="make -j 4" \
    install "curl"
  CONFIGURE="./configure --prefix=$INSTALL_DIR --disable-static" \
  MAKE="make -j 2" \
    install "expat"
  PRE_CONFIGURE="make configure" \
  CONFIGURE="./configure --prefix=$INSTALL_DIR --with-expat=$INSTALL_DIR --with-curl=$INSTALL_DIR" \
  MAKE="make -j 4 EXPATDIR=$INSTALL_DIR CURLDIR=$INSTALL_DIR" \
    install "git"

  # Create wrapper command to export LD_LIBRARY_PATH
  # git -> git_
  if [[ -x "$INSTALL_DIR/bin/git" ]]; then
    mv "$INSTALL_DIR/bin/git" "$INSTALL_DIR/bin/git_"
    cat <<EOF > "$INSTALL_DIR/bin/git"
#/bin/sh
export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$INSTALL_DIR/lib"
$INSTALL_DIR/bin/git_ \$*
EOF
    chmod +x "$INSTALL_DIR/bin/git"
    success "creating git command wrapper"
  else
    error "no such a file: $INSTALL_DIR/bin/git"
    exit
  fi

  echo "You will need to manually add following commands to bashrc or zshrc"
  echo "in order to work with git-tools."
  echo ""
  echo "    export PATH=\"\$PATH:$INSTALL_DIR/bin\""
  echo ""
}

# ==============================================================================
# SUBCOMMANDS

# Download source file only
function git-tools-getpack {
  check_os
  mkdir -p "$WORK_SPACE"
  download_package
  success "source file downloaded."
}

# Download and install packages
function git-tools-unpack {
  check_os
  mkdir -p "$INSTALL_DIR"
  mkdir -p "$WORK_SPACE"
  download_package
  install_package
}
function git-tools-install {
  git-tools-unpack
}

# Remove packages
function git-tools-remove {
  if [ -d "$INSTALL_DIR/.git" ]; then
    error "$INSTALL_DIR is under git versioning."
    exit
  fi
  test -d "$INSTALL_DIR" && rm -rf "$INSTALL_DIR"
  test -d "$WORK_SPACE"  && rm -rf "$WORK_SPACE"
}
function git-tools-uninstall {
  git-tools-remove
}

# Show help
function git-tools-help {
  echo "git-tools"
  echo "  unpack | install   -- install from source"
  echo "  remove | uninstall -- remove files"
}

function git-tools-test {
  $INSTALL_DIR/bin/git --version
  $INSTALL_DIR/bin/git init
  $INSTALL_DIR/bin/git status
}

# ==============================================================================
# MAIN

SUBCOMMAND=""
ARGS=()
while [ $# -gt 0 ]
do
  case "$1" in
  --help | --version | -V )
    git-tools-help
    exit 0
    ;;
  * )
    if [ -z "$SUBCOMMAND" ]; then
      SUBCOMMAND="$1"
    else
      ARGS+=( "$1" )
    fi
    shift
    ;;
  esac
done

function invoke_subcommand {
  local SUBCOMMAND="${@:1:1}"
  local ARGS=( "${@:2}" )
  local ACTION="git-tools-${SUBCOMMAND:-help}"
  if type "$ACTION" &>/dev/null; then
    "$ACTION" "${ARGS[@]}"
  else
    error "unknown command: $SUBCOMMAND"
  fi
}

invoke_subcommand "$SUBCOMMAND" "${ARGS[@]}"
