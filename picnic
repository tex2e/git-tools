#!/bin/bash

function warn {
  # color:yellow
  echo -e "\033[33mWarning\033[m" "$*"
}

function error {
  # color:red
  echo -e "\033[31mError\033[m" "$*"
}

function success {
  # color:green
  echo -e "\033[32mSuccess\033[m" "$*"
}

function check_os {
  case ${OSTYPE} in
    linux*)
      success "OK"
      ;;
    *)
      error "$OSTYPE is NOT supported, exitting"
      exit 1
      ;;
  esac
}

function check_available {
  which "$1" &>/dev/null
  return $?
}

function package_download {
  cd ~/picnic-tmp
  wget "http://zlib.net/zlib-1.2.8.tar.gz"
  wget "https://www.kernel.org/pub/software/scm/git/git-2.8.1.tar.gz"
  wget -O expat-2.1.1.tar.bz2 "http://downloads.sourceforge.net/project/expat/expat/2.1.1/expat-2.1.1.tar.bz2?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fexpat%2F&ts=1460701353&use_mirror=ufpr"
  wget "https://www.openssl.org/source/openssl-1.0.2g.tar.gz"
  wget "http://www.execve.net/curl/curl-7.48.0.tar.gz"
}

function install_zlib {
  cd ~/picnic-tmp
  tar zxvf zlib-1.2.8.tar.gz
  cd zlib-1.2.8
  ./configure --prefix=$HOME/picnic-tools
  make &&
  make install &&
  success "installed zlib to $HOME/picnic-tools"
}


function install_git {
  cd ~/picnic-tmp
  tar zxvf git-2.8.1.tar.gz
  cd git-2.8.1
  ./configure --prefix=$HOME/picnic-tools --with-curl=$HOME/picnic-tools/ --with-expat=$HOME/picnic-tools
  make &&
  make install &&
  success "installed git to $HOME/picnic-tools"
}

function install_curl {
  cd ~/picnic-tmp

  # ar xv libcurl4-openssl-dev_7.22.0-3ubuntu4.15_amd64.deb
  # tar zxvf data.tar.gz
  # mv ./usr/* ~/picnic-tools
  # mv ~/picnic-tools/lib/x86_64-linux-gnu/* ~/picnic-tools/lib
  # rm -rf x86_64-linux-gnu/

  tar zxvf curl-7.48.0.tar.gz
  cd curl-7.48.0
  ./buildconf
  ./configure --with-ssl=$HOME/picnic-tools --prefix=$HOME/picnic-tools
  make &&
  make install &&
  success "installed curl to $HOME/picnic-tools"
}

function install_ssl {
  cd ~/picnic-tmp
  tar zxvf openssl-1.0.2g.tar.gz
  cd openssl-1.0.2g
  ./config --prefix=$HOME/picnic-tools shared zlib-dynamic
  make &&
  make install &&
  success "installed openssl to $HOME/picnic-tools"
}

function install_expat {
  cd ~/picnic-tmp
  tar zxvf expat-2.1.0.tar.gz
  cd expat-2.1.0
  ./configure --prefix=$HOME/picnic-tools --disable-static
  make &&
  make install &&
  success "installed expat to $HOME/picnic-tools"
}

# SUBCOMMANDS

function picnic-getpack {
  check_os
  mkdir ~/picnic-tmp
  package_download
  success "source file downloaded."
}

function picnic-unpack {
  check_os
  mkdir ~/picnic-tmp
  mkdir ~/picnic-tools
  package_download
  export CPPFLAGS="-I$HOME/picnic-tools/include" LDFLAGS="-L$HOME/picnic-tools/lib"
  install_zlib
  install_ssl
  install_curl
  install_expat
  install_git
  # echo "PATH=$PATH:~/picnic/bin" >> "~/.$(basename $SHELL)rc"
}

function picnic-reunpack {
  check_os
  if [ ! -e picnic-tmp/ ]; then
    echo "packages not found in local, try 'picnic unpack'"
    exit 1
  fi
  if [ -e picnic-tools ];then
    rm -rf picnic-tools/
  fi
  mkdir ~/picnic-tools
  export CPPFLAGS="-I$HOME/picnic-tools/include" LDFLAGS="-L$HOME/picnic-tools/lib"
  install_zlib
  install_ssl
  install_curl
  install_expat
  install_git
}

function picnic-test {
  cd ~/picnic-tools/bin
  ./git clone https://github.com/nobuyo/picnic.git || exit 1
  success "Git installed successfully"
  exit 0
}

function picnic-remove {
  if [ -e ~/picnic-tools ]; then
    rm -rf ~/picnic-*
  fi
}

# for dev
function picnic-update {
  dir="$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)"
  me=$dir/"$(basename $0)"
  mv $me $dir/picnic-old
  wget -O $me "https://raw.githubusercontent.com/nobuyo/picnic/master/picnic"
  if [ $? -ne 0 ]; then
    error "pinic Could not found, reverting"
    mv $dir/pinic-old $me
    exit 1
  fi
  chmod +x $me
  success "Updated picnic"
}

function picnic-help {
  echo "picnic-0.1.0"
  echo "  unpack: install from source"
  echo "  remove: remove files"
}

# MAIN

SUBCOMMAND=""
ARGS=()
while [ $# -gt 0 ]
do
  case "$1" in

    --help|--version|-V)
      picnic-help
      exit 0
    ;;

    *)
      if [ -z "$SUBCOMMAND" ]; then
        SUBCOMMAND="$1"
      else
        ARGS+=( "$1" )
      fi
      shift
    ;;
  esac
done

function invoke_subcommand {
  local SUBCOMMAND="${@:1:1}"
  local ARGS=( "${@:2}" )
  local ACTION="picnic-${SUBCOMMAND:-help}"
  if type "$ACTION" &>/dev/null; then
    "$ACTION" "${ARGS[@]}"
  else
    error "unknown command: $SUBCOMMAND"
  fi
}

invoke_subcommand "$SUBCOMMAND" "${ARGS[@]}"
