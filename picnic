#!/bin/bash
#
# picnic - deploy git without sudo/root
#

INSTALL_DIR=${INSTALL_DIR:-"$HOME/picnic-tools"}
WORK_SPACE=${WORK_SPACE:-"/tmp/picnic"}
LOGFILE="$WORK_SPACE/install.log"

function warn {
  # color:yellow
  echo -e "\033[33mWarning\033[m" "$*"
}

function error {
  # color:red
  echo -e "\033[31mError\033[m" "$*"
}

function success {
  # color:green
  echo -e "\033[32mSuccess\033[m" "$*"
}

function show_result {
  case "$1" in
  0 ) success "installed $2 to $INSTALL_DIR" ;;
  * ) error   "failed install $2, see $LOGFILE to more info" ;;
  esac
}

function check_os {
  case "$OSTYPE" in
  linux* )
    success "The system is $OSTYPE, ready to deploy"
    ;;
  * )
    error "$OSTYPE is NOT supported, exitting"
    exit 1
    ;;
  esac
}

# function check_available {
#   which "$1" &>/dev/null
#   return $?
# }

package_zlib="http://zlib.net/zlib-1.2.8.tar.gz"
package_git="https://www.kernel.org/pub/software/scm/git/git-2.8.1.tar.gz"
package_expat="http://osdn.jp/frs/g_redir.php?m=kent&f=%2Fexpat%2Fexpat%2F2.1.0%2Fexpat-2.1.0.tar.gz"
package_openssl="https://www.openssl.org/source/openssl-1.0.2g.tar.gz"
package_curl="http://www.execve.net/curl/curl-7.48.0.tar.gz"

function package_download {
  cd "$WORK_SPACE"
  # ordered by file size
  download "curl" &
  download "git" &
  download "openssl" &
  download "zlib" &
  download "expat" &
  wait
}

function download {
  local package=$1
  local package_url=$(eval echo '$package_'$1)
  wget -O "$package.tar.gz" "$package_url" &>/dev/null &&
  success "download source file: $(basename -- $package)"
}

function install {
  local result=1
  local package="$1"
  local tar_package="$package.tar.gz"
  cd "$WORK_SPACE"
  echo "installing $package..."
  {
    echo "=========INSTALLING $package=========" &&
    mkdir "$package" &&
    tar zxf "$tar_package" -C "$package" --strip-components 1 &&
    cd "$package" &&
    ${CONFIGURE:-./configure} &&
    ${MAKE:-make} &&
    make install
    result=$?
  } > "$WORK_SPACE/tmp.$$" 2>&1
  cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE"
  show_result "$result" "$package"
}

# function install_zlib {
#   local result=1
#   local package="zlib"
#   local tar_package="$package.tar.gz"
#   cd "$WORK_SPACE"
#   echo "installing $package..."
#   {
#     echo "=========INSTALLING $package=========" &&
#     mkdir "$package" &&
#     tar zxf "$tar_package" -C "$package" --strip-components 1 &&
#     cd "$package" &&
#     ./configure --prefix="$INSTALL_DIR" &&
#     make &&
#     make install
#     result=$?
#   } > "$WORK_SPACE/tmp.$$" 2>&1
#   cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE"
#   show_result "$result" "$package"
# }
#
# function install_git {
#   local result=1
#   local package="git"
#   local tar_package="$package.tar.gz"
#   cd "$WORK_SPACE"
#   echo "installing $package..."
#   {
#     echo "=========INSTALLING $package=========" &&
#     mkdir "$package" &&
#     tar zxf "$tar_package" -C "$package" --strip-components 1 &&
#     cd "$package" &&
#     ./configure --prefix="$INSTALL_DIR" --with-expat="$INSTALL_DIR" --with-curl="$INSTALL_DIR" &&
#     make CURLDIR="$INSTALL_DIR" &&
#     make install
#     result=$?
#   } > "$WORK_SPACE/tmp.$$" 2>&1
#   cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE"
#   show_result "$result" "$package"
# }
#
# function install_curl {
#   local result=1
#   local package="curl"
#   local tar_package="$package.tar.gz"
#   cd "$WORK_SPACE"
#   echo "installing $package..."
#   {
#     echo "=========INSTALLING $package=========" &&
#     mkdir "$package" &&
#     tar zxf "$tar_package" -C "$package" --strip-components 1 &&
#     cd "$package" &&
#     ./configure --with-ssl="$INSTALL_DIR" --prefix="$INSTALL_DIR" &&
#     make &&
#     make install
#     result=$?
#   } > "$WORK_SPACE/tmp.$$" 2>&1
#   cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE"
#   show_result "$result" "$package"
# }
#
# function install_openssl {
#   local result=1
#   local package="openssl"
#   local tar_package="$package.tar.gz"
#   cd "$WORK_SPACE"
#   echo "installing $package..."
#   {
#     echo "=========INSTALLING $package=========" &&
#     mkdir "$package" &&
#     tar zxf "$tar_package" -C "$package" --strip-components 1 &&
#     cd "$package" &&
#     ./config --prefix="$INSTALL_DIR" shared zlib-dynamic &&
#     make &&
#     make install
#     result=$?
#   } > "$WORK_SPACE/tmp.$$" 2>&1
#   cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE"
#   show_result "$result" "$package"
# }
#
# function install_expat {
#   local result=1
#   local package="expat"
#   local tar_package="$package.tar.gz"
#   cd "$WORK_SPACE"
#   echo "installing $package..."
#   {
#     echo "=========INSTALLING $package=========" &&
#     mkdir "$package" &&
#     tar zxf "$tar_package" -C "$package" --strip-components 1 &&
#     cd "$package" &&
#     ./configure --prefix="$INSTALL_DIR" --disable-static &&
#     make &&
#     make install
#     result=$?
#   } > "$WORK_SPACE/tmp.$$" 2>&1
#   cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE"
#   show_result "$result" "$package"
# }

# SUBCOMMANDS

# download source file only
function picnic-getpack {
  check_os
  mkdir -p "$WORK_SPACE"
  package_download
  success "source file downloaded."
}

# download and install packages
#
# dependencies tree
#
#   git
#   ├── curl
#   │   └── openssl
#   │       └── zlib
#   └── expat
#
function picnic-unpack {
  check_os
  mkdir -p "$INSTALL_DIR"
  mkdir -p "$WORK_SPACE"
  package_download
  export CPPFLAGS="-I$INSTALL_DIR/include" LDFLAGS="-L$INSTALL_DIR/lib" LD_LIBRARY_PATH="$INSTALL_DIR/lib"
  echo "picnic unpack $(date)" > "$LOGFILE"

  CONFIGURE='./configure --prefix="$INSTALL_DIR"' \
    install "zlib"
  CONFIGURE='./config --prefix="$INSTALL_DIR" shared zlib-dynamic' \
    install "openssl"
  CONFIGURE='./configure --with-ssl="$INSTALL_DIR" --prefix="$INSTALL_DIR"' \
    install "curl"
  CONFIGURE='./configure --prefix="$INSTALL_DIR" --disable-static' \
    install "expat"
  CONFIGURE='./configure --prefix="$INSTALL_DIR" --with-expat="$INSTALL_DIR" --with-curl="$INSTALL_DIR"' \
  MAKE='make CURLDIR="$INSTALL_DIR"' \
    install "git"

  # install_zlib
  # install_openssl
  # install_curl
  # install_expat
  # install_git

  # echo "PATH=$PATH:$INSTALL_DIR/bin" >> "$HOME/.$(basename $SHELL)rc"
}

# reinstall packages
function picnic-reunpack {
  picnic-remove
  picnic-unpack
}

# remove packages
function picnic-remove {
  if [ -d "$INSTALL_DIR" ]; then
    rm -rf "$INSTALL_DIR"
  fi
}

function picnic-help {
  echo "picnic-1.1.0"
  echo "  unpack: install from source"
  echo "  remove: remove files"
}

# MAIN

SUBCOMMAND=""
ARGS=()
while [ $# -gt 0 ]
do
  case "$1" in
  --help | --version | -V )
    picnic-help
    exit 0
    ;;
  * )
    if [ -z "$SUBCOMMAND" ]; then
      SUBCOMMAND="$1"
    else
      ARGS+=( "$1" )
    fi
    shift
    ;;
  esac
done

function invoke_subcommand {
  local SUBCOMMAND="${@:1:1}"
  local ARGS=( "${@:2}" )
  local ACTION="picnic-${SUBCOMMAND:-help}"
  if type "$ACTION" &>/dev/null; then
    "$ACTION" "${ARGS[@]}"
  else
    error "unknown command: $SUBCOMMAND"
  fi
}

invoke_subcommand "$SUBCOMMAND" "${ARGS[@]}"
