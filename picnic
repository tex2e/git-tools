#!/bin/bash

INSTALL_DIR=${INSTALL_DIR:-"$HOME/picnic-tools"}
WORK_SPACE=${WORK_SPACE:-"/tmp/picnic"}
LOGFILE="$WORK_SPACE/install.log"

mkdir -p "$INSTALL_DIR"
mkdir -p "$WORK_SPACE"

function warn {
  # color:yellow
  echo -e "\033[33mWarning\033[m" "$*"
}

function error {
  # color:red
  echo -e "\033[31mError\033[m" "$*"
}

function success {
  # color:green
  echo -e "\033[32mSuccess\033[m" "$*"
}

function show_result {
  case "$1" in
  0 )
    success "installed $2 to $INSTALL_DIR"
    ;;
  * )
    error "failed install $2 ith $1, see $LOGFILE to more info"
    ;;
  esac
}

function check_os {
  case ${OSTYPE} in
  linux* )
    success "The system is $OSTYPE, ready to deploy"
    ;;
  * )
    error "$OSTYPE is NOT supported, exitting"
    exit 1
    ;;
  esac
}

function check_available {
  which "$1" &>/dev/null
  return $?
}

function package_download {
  cd "$WORK_SPACE"
  wget "http://zlib.net/zlib-1.2.8.tar.gz"
  wget "https://www.kernel.org/pub/software/scm/git/git-2.8.1.tar.gz"
  wget -O expat-2.1.0.tar.gz "http://osdn.jp/frs/g_redir.php?m=kent&f=%2Fexpat%2Fexpat%2F2.1.0%2Fexpat-2.1.0.tar.gz"
  wget "https://www.openssl.org/source/openssl-1.0.2g.tar.gz"
  wget "http://www.execve.net/curl/curl-7.48.0.tar.gz"
}

function install_zlib {
  cd "$WORK_SPACE"
  {
    echo "=========INSTALLING ZLIB========="
    tar zxf zlib-1.2.8.tar.gz &&
    cd zlib-1.2.8 &&
    ./configure --prefix="$INSTALL_DIR" &&
    make &&
    make install
  } > "$WORK_SPACE/tmp.$$"
  cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE" 2>&1
  show_result $? "zlib"
}


function install_git {
  cd "$WORK_SPACE"
  {
    echo "=========INSTALLING GIT========="
    tar zxf git-2.8.1.tar.gz &&
    cd git-2.8.1 &&
    ./configure --prefix="$INSTALL_DIR" --with-expat="$INSTALL_DIR" --with-curl="$INSTALL_DIR" &&
    make CURLDIR=$HOME/picnic-tools &&
    make install
  } > "$WORK_SPACE/tmp.$$"
  cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE" 2>&1
  show_result $? "git"
}

function install_curl {
  cd "$WORK_SPACE"
  {
    echo "=========INSTALLING CURL========="
    tar zxf curl-7.48.0.tar.gz &&
    cd curl-7.48.0 &&
    ./configure --with-ssl="$INSTALL_DIR" --prefix="$INSTALL_DIR" &&
    make &&
    make install
  } > "$WORK_SPACE/tmp.$$"
  cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE" 2>&1
  show_result $? "curl"
}

function install_ssl {
  cd "$WORK_SPACE"
  {
    echo "=========INSTALLING SSL========="
    tar zxf openssl-1.0.2g.tar.gz &&
    cd openssl-1.0.2g &&
    ./config --prefix="$INSTALL_DIR" shared zlib-dynamic &&
    make &&
    make install
  } > "$WORK_SPACE/tmp.$$"
  cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE" 2>&1
  show_result $? "ssl"
}

function install_expat {
  cd "$WORK_SPACE"
  {
    echo "=========INSTALLING EXPAT========="
    tar zxf expat-2.1.0.tar.gz &&
    cd expat-2.1.0 &&
    ./configure --prefix="$INSTALL_DIR" --disable-static &&
    make &&
    make install
  } > "$WORK_SPACE/tmp.$$"
  cat "$WORK_SPACE/tmp.$$" >> "$LOGFILE" 2>&1
  show_result $? "expat"
}

# SUBCOMMANDS

function picnic-getpack {
  check_os
  mkdir "$WORK_SPACE"
  package_download
  success "source file downloaded."
}

# Dependencies tree
#
#   git
#   ├── curl
#   │   └── ssl
#   │       └── zlib
#   └── expat
#

function picnic-unpack {
  check_os
  mkdir -p "$INSTALL_DIR"
  mkdir -p "$WORK_SPACE"
  package_download
  export CPPFLAGS="-I$INSTALL_DIR/include" LDFLAGS="-L$INSTALL_DIR/lib" LD_LIBRARY_PATH="$INSTALL_DIR/lib/"
  echo "picnic unpack $(date)" > "$LOGFILE"
  install_expat &
  install_zlib
  install_ssl
  install_curl
  wait
  install_git
  # echo "PATH=$PATH:~/picnic/bin" >> "~/.$(basename $SHELL)rc"
}

function picnic-reunpack {
  picnic-remove
  picnic-unpack
}

function picnic-remove {
  if [ -e "$INSTALL_DIR" ];then
    rm -rf "$INSTALL_DIR"
  fi
}

function picnic-test {
  cd "$INSTALL_DIR/bin"
  ./git clone https://github.com/nobuyo/picnic.git || exit 1
  success "Git installed successfully"
  exit 0
}

# for dev
function picnic-update {
  dir="$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)"
  me="$dir/$(basename $0)"
  mv "$me" "$dir/picnic-old"
  wget -O "$me" "https://raw.githubusercontent.com/nobuyo/picnic/master/picnic"
  if [ $? -ne 0 ]; then
    error "pinic Could not found, reverting"
    mv "$dir/pinic-old" "$me"
    exit 1
  fi
  chmod +x "$me"
  success "Updated picnic"
}

function picnic-help {
  echo "picnic-0.1.0"
  echo "  unpack: install from source"
  echo "  remove: remove files"
}

# MAIN

SUBCOMMAND=""
ARGS=()
while [ $# -gt 0 ]
do
  case "$1" in
  --help | --version | -V )
    picnic-help
    exit 0
    ;;
  * )
    if [ -z "$SUBCOMMAND" ]; then
      SUBCOMMAND="$1"
    else
      ARGS+=( "$1" )
    fi
    shift
    ;;
  esac
done

function invoke_subcommand {
  local SUBCOMMAND="${@:1:1}"
  local ARGS=( "${@:2}" )
  local ACTION="picnic-${SUBCOMMAND:-help}"
  if type "$ACTION" &>/dev/null; then
    "$ACTION" "${ARGS[@]}"
  else
    error "unknown command: $SUBCOMMAND"
  fi
}

invoke_subcommand "$SUBCOMMAND" "${ARGS[@]}"
